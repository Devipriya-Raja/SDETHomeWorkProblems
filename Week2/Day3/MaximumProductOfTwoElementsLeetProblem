/*Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 

Example 1:

Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 
Time Complexity =  O(n) 
Space Complexity = O(1)

*/


package week2Day3Assignments;

import org.testng.annotations.Test;

public class MaximumProductOfTwoElementsLeetProblem {
	
	public int maxProd(int[] nums) {
		//Declare the variables
		int left=0,secondMax=0,max=0,right=nums.length-1;
		//set limits and loop through it
		while(left<right) {
			//Check if number on the right is greater than left
			if(nums[right]>nums[left]) {
				//if true , make it max
				max=nums[right];
				//check for second max and assign it to secondMax
				if(nums[left]>secondMax) 
					secondMax=nums[left];
				//Increment left
				left++;
			}
			//Check if number on the left is greater than right
			else {
				//if true , make it max
				max=nums[left];
				//check for second max and assign it to secondMax				
				if(nums[right]>secondMax)	
					secondMax=nums[right];
				//Decrement right
				right--;
			}
			}
		System.out.println(max);
		System.out.println(secondMax);
		return (max-1)*(secondMax-1);
		}
	@Test
	public void maxProd() {
		int[] nums = {70,1,0,13,12};
		int[] nums1 = {5,0,10,15,12};
		int[] nums2 = {4,1,6,3,12};
		System.out.println(maxProd(nums));
		System.out.println(maxProd(nums1));
		System.out.println(maxProd(nums2));


}
}
