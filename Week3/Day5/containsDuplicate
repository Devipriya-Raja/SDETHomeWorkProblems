/*219. Contains Duplicate II
Easy
4.8K
2.6K
Companies
Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true

Time Complexity = O(n)
Space Complexity = O(n)
*/
package week3Day5Assignments;
import java.util.Set;

import org.testng.annotations.Test;

import java.util.HashSet;
public class containsDuplicate {
	    public boolean containsNearbyDuplicate(int[] nums, int k) {
	        // Create a hash set to store the elements and their indices
	        Set<Integer> set = new HashSet<>();

	        // Loop through the array
	        for (int i = 0; i < nums.length; i++) {
	            // If the set already contains the element, return true
	            if (set.contains(nums[i])) {
	                return true;
	            }

	            // Add the element to the set
	            set.add(nums[i]);

	            // If the size of the set exceeds k remove the element at the i - k th index
	            if (set.size() > k) {
	                set.remove(nums[i - k]);
	            }
	        }

	        // Return false if no duplicate with distance less than or equal to k is found
	        return false;
	    }
	@Test
public void printContainsDuplicate() {
	int[] nums={1,2,3,1};
	System.out.println(containsNearbyDuplicate(nums,3));
	System.out.println(containsNearbyDuplicate(nums,1));
	int[] nums1={1,0,1,1};
	System.out.println(containsNearbyDuplicate(nums1,1));
	int[] nums2={1,2,3,1,2,3};
	System.out.println(containsNearbyDuplicate(nums2,2));
	System.out.println(containsNearbyDuplicate(nums2,3));
}

}
