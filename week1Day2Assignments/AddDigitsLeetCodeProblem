/*https://leetcode.com/problems/add-digits/
 * 
Given an integer num, repeatedly add all its digits until the result has only one digit, and return it. 

Example 1:

Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2 
Since 2 has only one digit, return it.

Follow up: Could you do it without any loop/recursion in O(1) runtime?

Time Complexity = O(log^2 n) - addDigitsUsingLoop
Space Complexity = O(1)
 */

package week1Day2Assignments;

import org.testng.annotations.Test;

public class AddDigitsLeetCodeProblem {
	// Declare variable n
	public void addDigits(int num) {
		//Print 0 if num is equal to 0
        if(num == 0) 
        	System.out.println(0);
      //Print 9 if num is divisible to 9 and if mod is equal to 0
        else if(num%9 == 0) 
        	System.out.println(9);
      //Print 9 if num is divisible to 9
        else 
        	System.out.println(num%9);
    }
	
	public void addDigitsUsingLoop(int num) {
        while (num >= 10) {
            int sum = 0;
            while (num != 0) {
                sum += num % 10;
                num = num / 10;
            }
            num = sum;
        }
        System.out.println(num);
    }
	
	@Test
	public void printPyramid() {
		addDigits(0);
		addDigitsUsingLoop(0);
		addDigits(38);
		addDigitsUsingLoop(38);
		addDigits(9);
		addDigitsUsingLoop(9);

		
	}

}
