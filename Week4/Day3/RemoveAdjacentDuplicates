/*1047. Remove All Adjacent Duplicates In String
Easy
5.7K
221
Companies
You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

 

Example 1:

Input: s = "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".
Example 2:

Input: s = "azxxzy"
Output: "ay"

Time Complexity O(n)
Space Complexity O(n)


*/
package week4Day3Assignments;

	import java.util.Stack;

import org.testng.annotations.Test;

	public class RemoveAdjacentDuplicates {
	    public String removeAdjacentDuplicates(String s) {
	    	//Initialize an empty stack
	        Stack<Character> stack = new Stack<>();
            //Iterate through each character
	        for (char ch : s.toCharArray()) {
	        	//If the stack is not empty and the top element of the stack is equal to ch, pop the top element from the stack
	            if (!stack.isEmpty() && stack.peek() == ch) {
	                stack.pop();
	                //Else push the ch to the stack
	            } else {
	                stack.push(ch);
	            }
	        }
           //append all the elements by popping them and storing in a String
	        StringBuilder result = new StringBuilder();
	        while (!stack.isEmpty()) {
	            result.append(stack.pop());
	        }

	        return result.reverse().toString();
	    }

@Test
	    public void removeDuplicatesTest() {
	String s = "abbaca";
	String result = removeAdjacentDuplicates(s);
	System.out.println(result);  // Output: "ca"

	s = "azxxzy";
	result = removeAdjacentDuplicates(s);
	System.out.println(result);  // Output: "ay"

}
	}
