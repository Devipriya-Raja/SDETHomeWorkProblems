/*1200. Minimum Absolute Difference
Easy
2.1K
67
Companies
Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.

Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows

a, b are from arr
a < b
b - a equals to the minimum absolute difference of any two elements in arr
 

Example 1:

Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.

Time Complexity =  O(n log n)
Space Complexity = O(n)


*/

package week3Day2Assignments;

import java.util.*;

import org.testng.annotations.Test;

public class MinimumAbsDifference {
	public List<List<Integer>> minimumAbsDifference(int[] arr) {
		// Sort the array to find adjacent elements with minimum absolute difference
        Arrays.sort(arr); 
        int minDiff = Integer.MAX_VALUE;
        List<List<Integer>> result = new ArrayList<>();
        // To avoid duplicates
        Set<Integer> set = new HashSet<>();
        //Loop trough the array elements and find the difference between the i th and i-1 th values and compare with minDiff
        for (int i = 1; i < arr.length; i++) {
            int diff = arr[i] - arr[i-1];
            if (diff < minDiff) {
                minDiff = diff;
             // New minimum difference found, clear previous pairs
                result = new ArrayList<>(); 
            }
            // Avoid duplicates
            if (diff == minDiff && !set.contains(arr[i-1])) {
                result.add(Arrays.asList(arr[i-1], arr[i]));
                set.add(arr[i-1]);
            }
        }
        return result;
    }
	
	@Test
	public void printminimumAbsDifference() {
		int[] nums={4,2,1,3};
		int[] nums0={1,3,6,10,15};
		System.out.println(minimumAbsDifference(nums));
		System.out.println(minimumAbsDifference(nums0));
		int[] nums1={3,8,-10,23,19,-4,-14,27};
		System.out.println(minimumAbsDifference(nums1));
}
}


