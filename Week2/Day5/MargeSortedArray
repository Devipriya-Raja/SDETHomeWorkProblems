/*88. Merge Sorted Array
Easy
10.3K
987
Companies
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

Time Complexity = O(m+n)
Space Complexity = O(1)

*/
package week2Day5Assignments;

import java.util.Arrays;

import org.testng.annotations.Test;

public class MargeSortedArray {
	public void mergeSortedArray(int[] nums1, int m, int[] nums2, int n) {
        // Initialize pointers for nums1 and nums2
        int pointer1 = m - 1;
        int pointer2 = n - 1;
        // Initialize pointer for the merged array
        int pointer = m + n - 1;
        // Merge nums1 and nums2 into a single array
        while (pointer1 >= 0 && pointer2 >= 0) {
            if (nums1[pointer1] > nums2[pointer2]) {
                nums1[pointer] = nums1[pointer1];
                pointer1--;
            } else {
                nums1[pointer] = nums2[pointer2];
                pointer2--;
            }
            pointer--;
        }
        // Copy remaining elements from nums2 to nums1
        System.arraycopy(nums2, 0, nums1, 0, pointer2 + 1);
        System.out.println(Arrays.toString(nums1));
}
	
	@Test
	public void printmergeSortedArray() {
		int[] nums={1,2,3,0,0,0};
		int[] nums0={2,5,6};
		mergeSortedArray(nums,3,nums0,3);
		int[] nums2={0};
		int[] nums3={1};
		mergeSortedArray(nums2,0,nums3,1);
		int[] nums1={};
		mergeSortedArray(nums3,1,nums1,0);
		
	}
}
