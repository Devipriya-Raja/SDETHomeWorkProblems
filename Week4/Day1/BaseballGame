/*682. Baseball Game
Easy
2.3K
1.8K
Companies
You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.

You are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:

An integer x.
Record a new score of x.
'+'.
Record a new score that is the sum of the previous two scores.
'D'.
Record a new score that is the double of the previous score.
'C'.
Invalidate the previous score, removing it from the record.
Return the sum of all the scores on the record after applying all the operations.
The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.



Example 1:

Input: ops = ["5","2","C","D","+"]
Output: 30
Explanation:
"5" - Add 5 to the record, record is now [5].
"2" - Add 2 to the record, record is now [5, 2].
"C" - Invalidate and remove the previous score, record is now [5].
"D" - Add 2 * 5 = 10 to the record, record is now [5, 10].
"+" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].
The total sum is 5 + 10 + 15 = 30.


Time Complexity = O(n)
Space Complexity =  O(n)


*/


package week4Day1Assignments;

import java.util.Stack;

import org.testng.annotations.Test;

public class BaseballGame {
	public static int baseballGamePoints(String[] ops) {
	       //Initialize a stack and a variable sum = 0 and other variables as well
	        int sum = 0,removedScore,prevScore,doubledScore,prevScore1,newScore;
	        
	        Stack<Integer> stack = new Stack<>();
	        //Iterate over each operation in the given list of operations
	        for (String op : ops) {
	        	//If the operation is "C", pop the top element from the stack and subtract it from the sum
	            if (op.equals("C")) {
	                removedScore = stack.pop();
	                sum -= removedScore;
	            } 
	            //If the operation is "D", double the top element of the stack, push it into the stack, and add it to the sum.
	            else if (op.equals("D")) {
	                prevScore = stack.peek();
	                doubledScore = prevScore * 2;
	                stack.push(doubledScore);
	                sum += doubledScore;
	            } 
	            //If the operation is "+", pop the top two elements from the stack and calculate its sum and push both elements back into the stack
	            else if (op.equals("+")) {
	                prevScore = stack.pop();
	                prevScore1 = stack.peek();
	                newScore = prevScore + prevScore1;
	                stack.push(prevScore);
	                stack.push(newScore);
	                sum += newScore;
	            } 
	            //Else parse the operation as its a String and we need an integer, push it into the stack and add it to the sum.
	            else {
	            	newScore = Integer.parseInt(op);
	                stack.push(newScore);
	                sum += newScore;
	            }
	        }
            
	        return sum;
	    }
@Test
   public static void baseballGamePoints() {

	        String[] ops1 = {"5", "2", "C", "D", "+"};
	        System.out.println(baseballGamePoints(ops1));  // Output: 30

	        String[] ops2 = {"5", "-2", "4", "C", "D", "9", "+", "+"};
	        System.out.println(baseballGamePoints(ops2));  // Output: 27

	        String[] ops3 = {"1", "C"};
	        System.out.println(baseballGamePoints(ops3));  // Output: 0
	    }
	}

